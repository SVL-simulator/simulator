/**
 * Copyright (c) 2020-2021 LG Electronics, Inc.
 *
 * This software contains code licensed as described in LICENSE.
 *
 */

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#pragma kernel PlumBobDistortion
#pragma kernel UnifiedProjectionDistortion

TEXTURE2D_X(_InputTexture);
SamplerState sampler_InputTexture;
TextureCube<float4> _InputCubemapTexture;
SamplerState sampler_InputCubemapTexture; 
RW_TEXTURE2D_X(float4, _DistortedTexture);

float4 _TexSize;
float enlargeFactorA, enlargeFactorB;
float frustumWidth, frustumHeight;
float b1, b2, b3, b4;
float xi;

// Distort UV using Plumb Bob model.
// Refer https://wiki.lgsvl.com/display/AUT/Lens+Distortion for more details.
float2 UndistortUvPlumbBob(float2 uv)
{
	float2 scaledUv = enlargeFactorA * uv + enlargeFactorB;
	float2 pos = (scaledUv - 0.5) * float2(frustumWidth, frustumHeight);
	float r2 = dot(pos, pos);
	float r4 = r2 * r2;
	float2 undistortedPos = pos *(1 + b1 * r2 + b2 * r4 + b3 * r2 * r4 + b4 * r4 * r4);
	float2 undistortedUv = undistortedPos / float2(frustumWidth, frustumHeight) + 0.5;

	return undistortedUv;
}

[numthreads(8,8,1)]
void PlumBobDistortion(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= uint(_TexSize.x) || id.y >= uint(_TexSize.y)) {
		return;
	}

	float2 normalizedUv = id.xy / float2(_TexSize.x, _TexSize.y);
	float2 undistortedUv = UndistortUvPlumbBob(normalizedUv);
	float3 color = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_InputTexture, undistortedUv, 0).rgb;
	// Since _DistortedTexture is bound to RWTexture2D,
	// the value written into it is always linear.
	// But the texture is created as sRGB, so we need to do gamma correction here.
	color = LinearToSRGB(color);
	_DistortedTexture[COORD_TEXTURE2D_X(id.xy)] = float4(color, 1);
}

// Distort UV using Unified Projection model.
// Refer https://wiki.lgsvl.com/display/AUT/Lens+Distortion for more details.
float3 UndistortUvUnifiedProjection(float2 uv)
{
	float2 pos = (uv - 0.5) * float2(frustumWidth, frustumHeight);
	float r2 = dot(pos, pos);
	float r4 = r2 * r2;
	float2 undistortedPos = pos * (1 + b1 * r2 + b2 * r4 + b3 * r2 * r4 + b4 * r4 * r4);

	float l2 = dot(undistortedPos, undistortedPos);
	float lamda = (xi + sqrt(1 + (1 - xi * xi) * l2)) / (l2 + 1);
	float3 cubeTexCoord;
	cubeTexCoord.xy = lamda * undistortedPos;
	cubeTexCoord.z = lamda - xi;

	return cubeTexCoord;
}

[numthreads(8, 8, 1)]
void UnifiedProjectionDistortion(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= uint(_TexSize.x) || id.y >= uint(_TexSize.y)) {
		return;
	}

	float2 normalizedUv = id.xy / float2(_TexSize.x, _TexSize.y);
	float3 cubeTexCoord = UndistortUvUnifiedProjection(normalizedUv);
	float3 color = _InputCubemapTexture.SampleLevel(sampler_InputCubemapTexture, cubeTexCoord, 0).rgb;
	// Since _DistortedTexture is bound to RWTexture2D,
	// the value written into it is always linear.
	// But the texture is created as sRGB, so we need to do gamma correction here.
	color = LinearToSRGB(color);
	_DistortedTexture[COORD_TEXTURE2D_X(id.xy)] = float4(color, 1);
}